@startuml  profileCfgCLIcommond
    title profileCfg CLI commond received by UART

        (*)->"cli commond profileCfg" 

    partition "CLI_task"
        --> UART_read()
        --> "没有匹配到registered CLI commands" #CCFFFF
        --> CLI_MMWaveExtensionHandler()
    end partition

    partition CLI_MMWaveExtensionHandler
        "CLI_MMWaveExtensionHandler()"-->cmd匹配到CLI_CmdTableEntry中的成员变量"profileCfg" #CCFFFF
        -->"ptrCLICommandEntry->cmdHandlerFxn (argc, argv)"
        -->[which is]CLI_MMWaveProfileCfg()
    end partition

    partition CLI_MMWaveProfileCfg
        "CLI_MMWaveProfileCfg()"->"检查参数个数" #CCFFFF
        -->检查参数个数
        -->"Initialize the profile configuration" #CCFFFF
        -->"Populate the profile configuration" #CCFFFF
        -->"profileHandle = MMWave_addProfile()"
        -->"Record the profile
            ptrBaseCfgProfileHandle[index] = profileHandle"
    end partition

@enduml


@startuml  cfarCfgCLIcommond
    title cfarCfg CLI commond received by UART

        (*)->"cli commond cfarCfg" 

    partition "CLI_task"
        --> UART_read()
        --> "匹配到registered CLI commands" #CCFFFF
        --> ptrCLICommandEntry->cmdHandlerFxn()
        -->[which is]MmwDemo_CLICfarCfg()
    end partition

    partition MmwDemo_CLICfarCfg
        "MmwDemo_CLICfarCfg()"->MmwDemo_CLIGetSubframe()
        -->[No]MmwDemo_CfgUpdate()
        note right
            传入参数
            (void *)&cfarCfg, MMWDEMO_CFARCFGRANGE_OFFSET,sizeof(cfarCfg), subFrameNum
            其中的MMWDEMO_CFARCFGRANGE_OFFSET或MMWDEMO_CFARCFGDOPPLER_OFFSET
            由(MMWDEMO_SUBFRAME_DSPDYNCFG_OFFSET + \offsetof(DPC_ObjectDetection_DynCfg, cfarCfgRange))定义
        end note
    end partition

    partition MmwDemo_CfgUpdate
        "MmwDemo_CfgUpdate()"-->memcpy((void *)((uint32_t) &gMmwMssMCB.subFrameCfg[subFrameNum] + offset), srcPtr, size)

        note right
            "MmwDemo_MSS_MCB
            中包含成员变量MmwDemo_SubFrameCfg         subFrameCfg[RL_MAX_SUBFRAMES]
            ====
            而MmwDemo_SubFrameCfg
            中包含成员变量MmwDemo_DPC_ObjDet_DynCfg objDetDynCfg
            ====
            而MmwDemo_DPC_ObjDet_DynCfg
            中包含成员变量DPC_ObjectDetection_DynCfg      dspDynCfg
            ====
            而DPC_ObjectDetection_DynCfg
            中包含成员变量
                DPU_CFARCAProc_CfarCfg cfarCfgRange
                DPU_CFARCAProc_CfarCfg cfarCfgDoppler
                DPU_CFARCAProc_FovCfg fovRange
                DPU_CFARCAProc_FovCfg fovDoppler
                DPU_AoAProc_MultiObjBeamFormingCfg multiObjBeamFormingCfg;
                bool  prepareRangeAzimuthHeatMap;
                DPU_AoAProc_FovAoaCfg fovAoaCfg;
                DPU_AoAProc_ExtendedMaxVelocityCfg extMaxVelCfg;
                DPC_ObjectDetection_StaticClutterRemovalCfg_Base staticClutterRemovalCfg
            "
        end note

        -->MmwDemo_setSubFramePendingState()

@enduml

@startuml sensorStartCfgCLIcommond
    (*)->"cli commond sensorStart" #CCFFFF

    partition "CLI_task"
        --> UART_read()
        --> "匹配到registered CLI commands" #CCFFFF
        --> ptrCLICommandEntry->cmdHandlerFxn()
        -->[which is]MmwDemo_CLISensorStart()
    end partition

    partition "MmwDemo_CLISensorStart"
        "MmwDemo_CLISensorStart()" --> 判断是否doReconfig #CCFFFF
        "判断是否doReconfig"-->["sensorStart"] "doReconfig = true" #CCFFFF
        "判断是否doReconfig"-->["sensorStart 0"] "doReconfig = false" #CCFFFF

        "doReconfig = false"-->==S1==
        "doReconfig = true"-->==S1==

        ==S1== -->[MmwDemo_SensorState_INIT||MmwDemo_SensorState_OPENED]CLI_getMMWaveExtensionConfig()
        -->MmwDemo_RFParser_getNumSubFrames()
        -->MmwDemo_isAllCfgInPendingState()
        if "AllCfgInPendingState" then
            ->[No] Error: Full configuration must be provided before sensor can be started #CCFFFF
        else 
            -->==S2==
        endif

        if "gMmwMssMCB.sensorState ==MmwDemo_SensorState_STARTED" then
            ->[Yes] Ignored: Sensor is already started #CCFFFF
        else
            -->==S3==
        endif

        -->"检查CfgPendingState是否满足不同doReconfig下的配置要求" #CCFFFF

        --> ==S4==
        
        if "gMmwMssMCB.sensorState ==MmwDemo_SensorState_INIT" 
            ->[no]"
            通过CLI_getMMWaveExtensionOpenConfig()
            检查chCfg, 
            lowPowerMode, 
            adcCfg是否更改
            如果更改必须reboot" as A1 #CCFFFF

        else
            -->[yes]CLI_getMMWaveExtensionOpenConfig()
            -->"MmwDemo_openSensor()
                ====
                gMmwMssMCB.sensorState= 
                MmwDemo_SensorState_OPENED" as A2
        endif

        A1 -->==S5==
        A2 -->==S5==

        if "doReconfig" 
            ->[true]CLI_getMMWaveExtensionConfig*()
            -->MmwDemo_configSensor()
            -->MmwDemo_startSensor()
        else
            -->MmwDemo_startSensor()
        endif
        -->"gMmwMssMCB.sensorState = MmwDemo_SensorState_STARTED"

        ==S1== --> ==S2==
    end partition

    partition MmwDemo_openSensor
        A2 --> [isFirstTimeOpen]rlRfSetLdoBypassConfig()
        --> "赋值gMmwMssMCB.cfg.openCfg" #CCFFFF
        --> MMWave_open()
        --> MmwDemo_mssSetHsiClk()
        --> MmwDemo_dataPathOpen()
    end partition

@enduml

@startuml MmwDemo_configSensor

    partition MmwDemo_configSensor
        "MmwDemo_configSensor()"-->MmwDemo_bpmConfig()
        -->MMWave_config()
        -->[MMWave_config Success]MmwDemo_dataPathConfig()
    end partition

    partition MmwDemo_dataPathConfig
        "MmwDemo_dataPathConfig()"-->"Get data path object and control configuration" #CCFFFF
        -->SOC_getDeviceRFFreqScaleFactor()
        -->MmwDemo_RFParser_getNumSubFrames*()

        partition "DPC pre-start common config"

            -->"DPM_ioctl()
            ----
            DPC_OBJDET_IOCTL__STATIC_PRE_START_COMMON_CFG" as temp

            note right
                给DPC发送预开始常规配置 preStartCommonCfg
                ----
                这个函数用来配置IPC
                ====
                eg.uint8_t numSubFrames;
                DPC_ObjectDetection_MeasureRxChannelBiasCfg measureRxChannelBiasCfg;
                DPU_AoAProc_compRxChannelBiasCfg compRxChanCfg;
                ANTDEF_AntGeometry antDef;
            end note

            -->MmwDemo_DPM_ioctl_blocking()
            -->MmwDemo_resetDynObjDetCommonCfgPendingState()

        end partition

        partition Config
            -->[reveaser loop] ==S6==
            --> "get a subFrameCfg
            ----
            subFrameCfg  = &gMmwMssMCB.subFrameCfg[subFrameIndx]" #CCFFFF
            -->MmwDemo_RFParser_parseConfig()
            -->MmwDemo_ADCBufConfig()
            -->MmwDemo_configCQ()
            
            note right
                MmwDemo_configCQ()用于配置
                Chirp Quality监视的监视器
            end note

            partition "DPC pre-start config"
                -->配置objDetPreStartR4fCfg.staticCfg #CCFFFF
                -->"MmwDemo_DPM_ioctl_blocking
                (DPC_OBJDETRANGEHWA_IOCTL__STATIC_PRE_START_CFG)"
                -->"Reset preStart config 
                ----
                DPC configuration 
                ----
                Convert CFAR threshold value 
                ----
                memory information configuration" #CCFFFF

                -->"MmwDemo_DPM_ioctl_blocking
                (DPC_OBJDET_IOCTL__STATIC_PRE_START_CFG)"
                -->MmwDemo_resetDynObjDetCfgPendingState()

                note right
                    配置完成,清除已有的配置
                end note

                --> ==S6== 
            end partition

        end partition
        ==S6== ->[遍历所有subFrameCfg] (*)
    end partition

    partition DPM_ioctl
        temp-->DPM_msgInitHeader()

        note right
            message的头部初始化
        end note

        -->[message的成员变量初始化]DPM_pipeSend()

        note right
            将message通过IPC发送给DSS端
        end note
    end partition

@enduml

@startuml MmwDemo_startSensor

    partition "MmwDemo_startSensor"
        (*)-->MmwDemo_dataPathStart()
        "MmwDemo_dataPathStart()"-->MMWave_start()
        -->GPIO_write()

        note left
            亮灯儿
        end note
    end partition

    partition "MmwDemo_dataPathStart"
        "MmwDemo_dataPathStart()" -> MmwDemo_configLVDSHwData()
        --> DPM_start()
        --> Semaphore_pend()
    end partition

    partition "DPM_start"
        "DPM_start()" --> DPM_msgInitHeader()

        note right
            DPM cmd : 
                DPM_MessageId_START
        end note

        --> DPM_pipeSend()
    end partition

    partition "MMWave_start"
        "MMWave_start()"--> Sanity Check #CCFFFF
        --> MMWave_deviceStartFxn()
        --> MMWave_startLink()
        --> ptrMMWaveMCB->status = ptrMMWaveMCB->status | MMWAVE_STATUS_STARTED
    end partition
@enduml